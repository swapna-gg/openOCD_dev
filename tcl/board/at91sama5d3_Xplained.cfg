################################################################################
# Atmel AT91SAMA5D3-EK eval board
################################################################################

source [find target/at91sama5d36.cfg]

# Set reset type.
#reset_config trst_and_srst

echo "SAMA5D3Xplained board lodaded."
set _FLASHNAME $_CHIPNAME.flash


$_TARGETNAME configure -event gdb-attach { reset init }
$_TARGETNAME configure -event reset-init { at91sama5d3_xplained_init }
$_TARGETNAME configure -event reset-start { at91sama5d3_start }

proc read_register {register} {
        set result ""
        mem2array result 32 $register 1
        return $result(0)
}

proc at91sama5d3_start { } {

	# Make sure that the the jtag is running slow, since there are a number of different ways the board
	# can be configured coming into this state that can cause communication problems with the jtag
	# adapter.  Also since this call can be made following a "reset init" where fast memory accesses
	# are enabled, need to temporarily shut this down so that the RSTC_MR register can be written at slower
	# jtag speed without causing GDB keep alive problem.

	arm7_9 fast_memory_access disable
	adapter_khz 2                   ;# Slow-speed oscillator enabled at reset, so run jtag speed slow.
	halt                            ;# Make sure processor is halted, or error will result in following steps.
	wait_halt 10000
	
}



proc at91sama5d3_xplained_init { } {

	# First disable watchdog
	mww 0xfffffe44 0x00008000	;# WDT_MR : disable watchdog.

	# Enable the main 18.432 MHz oscillator in CKGR_MOR register.
	mww 0xfffffc20 0x00374001
	while { [expr [read_register 0xfffffc68] & 0x01] != 1 } { sleep 1 }

	# Set PLLA Register for 792.576 MHz (divider: bypass, multiplier: 43).
	# Wait for LOCKA signal in PMC_SR to assert indicating PLLA is stable.

	mww 0xfffffc28 0x20ac3fff
	while { [expr [read_register 0xfffffc68] & 0x02] != 2 } { sleep 1 }

	#Initialize PLLA charge pump
	mww 0xfffffc80 0x00000300

	# Set master system clock prescaler divide by 6 and processor clock divide by 2 in PMC_MCKR.
	# Wait for MCKRDY signal from PMC_SR to assert.

	mww 0xfffffc30 0x00000101
	while { [expr [read_register 0xfffffc68] & 0x08] != 8 } { sleep 1 }

	# Now change PMC_MCKR register to select PLLA.
	# Wait for MCKRDY signal from PMC_SR to assert.

	mww 0xfffffc30 0x00001302
	while { [expr [read_register 0xfffffc68] & 0x08] != 8 } { sleep 1 }

	#  Processor and master clocks are now operating and stable at following frequencies:
	#	-> MCLK = 132.096 MHz
	#	-> PCLK = 396.288 MHz
	
	# Switch over to adaptive clocking.

	adapter_khz 0
	
	# Enable faster DCC downloads and memory accesses.

	arm7_9 dcc_downloads enable
	arm7_9 fast_memory_access enable
	########################################################################
	#Enabling DRAM
	########################################################################

	#Enabling periph clock for MPDDR
	mww 0xfffffd00 0x00020000	
	#enabling system clock
	mww 0xfffffc00 0x00000004

	# Init the special register for sama5d3x 
	# MPDDRC DLL Slave Offset Register: DDR2 configuration 
	mww 0xffffea78 0x01010000
	
	# MPDDRC DLL Master Offset Register 
	# write master + clk90 offset 
	mww 0xffffea74 0xc5010107
	# MPDDRC I/O Calibration Register 
	# DDR2 RZQ = 50 Ohm 
	# TZQIO = 4 
	mww 0xffffea34 0x00000404

	# Now Start the DRAM init dance..
	# 1. Program the memory device type into the Memory Device Register
	mww 0xffffea20 0x00000006

	# 2a. Program the feature of DDR2-SDRAM device into the Configuration Register
	mww 0xffffea08 0x00f2001f
	# 2b. Program the feature of DDR2-SDRAM device into the Timing Register
	#TPR0
	mww 0xffffea0c 0x22228226
	#TPR1
	mww 0xffffea10 0x02c81c1a
	#TPR2
	mww 0xffffea14 0x00072278

	# 3. Next issue a 'NOP' command through the MPDDRC_MR register followed by writing a zero value into
	# the starting memory location for the SDRAM.
	mww 0xffffea00 0x00000001
	mww 0x20000000 0
	sleep 1 

	# 4. An NOP command is issued to the DDR2-SDRAM
	mww 0xffffea00 0x00000001
	mww 0x20000000 0
	sleep 1 

	# 5. An all banks precharge command is issued to the DDR2-SDRAM.
	mww 0xffffea00 0x00000001
	mww 0x20000000 0
	sleep 1 

	# 6. An Extended Mode Register set(EMRS2) cycle is issued to chose between commercial or high
	# temperature operations.
	# Perform a write access to DDR2-SDRAM to acknowledge this command.
	# The write address must be chosen so that BA[1] is set to 1 and BA[0] is set to 0.

	mww 0xffffea00 0x00000005
	mww 0x20002000 0
	sleep 1 

	# 7. An Extended Mode Register set(EMRS3) cycle is issued
	# to set the Extended Mode Register to "0".
	# Perform a write access to DDR2-SDRAM to acknowledge this command.
	# The write address must be chosen so that BA[1] is set to 1 and BA[0] is set to 1.

	mww 0xffffea00 0x00000005
	mww 0x20003000 0
	sleep 1 

	# 8. An Extened Mode Register set(EMRS1) cycle is issued to enable DLL,
	# and to program D.I.C(Output Driver Impedance Control)
	# Perform a write access to DDR2-SDRAM to acknowledge this command.
	# The write address must be chosen so that BA[1] is set to 0 and BA[0] is set to 1.

	mww 0xffffea00 0x00000005
	mww 0x2001000 0
	sleep 1 

	# 9. Program DLL field into the Configuration Register to high(Enable DLL reset)
	mww 0xffffea08 0x00f2009f

	# 10. A Mode Register set(MRS) cycle is issied to reset DLL.
	# Perform a write access to DDR2-SDRAM to acknowledge this command.
	# The write address must be chosen so that BA[1:0] bits are set to 0.

	mww 0xffffea00 0x00000003
	mww 0x20000000 0
	sleep 1

	# 11. An all banks precharge command is issued to the DDR2-SDRAM.
	mww 0xffffea00 0x00000002
	mww 0x20000000 0
	sleep 1

	# 12. 2 Auto-refresh commands
	mww 0xffffea00 0x00000004
	mww 0x20000000 0
	sleep 1
	mww 0xffffea00 0x00000004
	mww 0x20000000 0
	sleep 1

	# 13. Program DLL field into the Configuration Register to low(Disable DLL reset)
	mww 0xffffea08 0x00f2001f

	# 14. A Mode Register set (MRS) cycle is issued to program
	# the parameters of the DDR2-SDRAM devices, in particular CAS latency,
	# burst length and to disable DDL reset.
	# Perform a write access to DDR2-SDRAM to acknowledge this command.
	# The write address must be chosen so that BA[1:0] bits are set to 0.
	mww 0xffffea00 0x00000003
	mww 0x20000000 0
	sleep 1

	# 15. Program OCD field into the Configuration Register
	# to high (OCD calibration default).
	mww 0xffffea08 0x00f2709f
	sleep 1

	# 16. An Extended Mode Register set (EMRS1) cycle is issued to OCD default value.
	# Perform a write access to DDR2-SDRAM to acknowledge this command.
	# The write address must be chosen so that BA[1] is set to 0 and BA[0] is set to 1.
	mww 0xffffea00 0x00000005
	mww 0x2001000 0
	sleep 1 
	
	#17. Program OCD field into the Configuration Register
	# to low (OCD calibration mode exit).
	mww 0xffffea08 0x00f2001f
	sleep 1

	# 18. An Extended Mode Register set (EMRS1) cycle is issued to OCD default value.
	# Perform a write access to DDR2-SDRAM to acknowledge this command.
	# The write address must be chosen so that BA[1] is set to 0 and BA[0] is set to 1.
	mww 0xffffea00 0x00000005
	mww 0x2001000 0
	sleep 1 
	
	# 19. A Nornal mode command is provided.
	mww 0xffffea00 0x00000000
	mww 0x2000000 0
	# 20. Perform a write access to any DDR2-SDRAM address
	mww 0x2000000 0

	# 21. Write the refresh rate into the count field in the Refresh Timer register.(Refresh timer: 7.8125us)
	mww 0xffffea04 0x00000411


	# Now we are ready to work on the DDRSDR, wait for end of calibration
	sleep 1
	########################################################################

	########################################################################
	#Enabling Nandflash
	########################################################################
	# Enable peripheral Clock for nand pins
	mww 0xfffffc10 0x00000400
	# Configure the nand controller pins
	#1. PE21
	mww 0xfffffa44 0x00200000 	;# PIO_IDR
	mww 0xfffffa64 0x00200000 	;# PIO_PUER

	mww 0xfffffa70 [expr[read_register 0xfffffa70] & 0xffdfffff] ;# not sure about this
	mww 0xfffffa74 [expr[read_register 0xfffffa74] & 0xffdfffff] ;# not sure about this

	mww 0xfffffa04 0x00200000 	;# PIO_PDR
	
	#2. PE22
	mww 0xfffffa44 0x00400000 	;# PIO_IDR
	mww 0xfffffa64 0x00400000 	;# PIO_PUER

	mww 0xfffffa70 [expr[read_register 0xfffffa70] & 0xffbfffff] ;# not sure about this
	mww 0xfffffa74 [expr[read_register 0xfffffa74] & 0xffbfffff] ;# not sure about this

	mww 0xfffffa04 0x00400000 	;# PIO_PDR       
	
	# Enable SMC peripheral clock
	mww 0xfffffc10 0x00000020
	
	# Configure SMC CS3 for NAND
	mww 0xffffc63c 0x01020101	;# SMC_SETUP3
	mww 0xffffc640 0x07050705	;# SMC_PULSE3
	mww 0xffffc644 0x00090008	;# SMC_CYCLE3
	mww 0xffffc648 0xb5040303	;# SMC_TIMINGS3
	mww 0xffffc64c 0x00010011	;# SMC_MODE3

	

}

